// <auto-generated />
using System;
using Escuela.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Escuela.Migrations
{
    [DbContext(typeof(EscuelaContext))]
    [Migration("20200613191636_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Escuela.Areas.Identity.Data.EscuelaUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AlumnoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Escuela.Models.Alumno", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CursoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("Alumnos");
                });

            modelBuilder.Entity("Escuela.Models.Asignatura", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AlumnoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CursoId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId");

                    b.HasIndex("CursoId");

                    b.ToTable("Asignaturas");

                    b.HasData(
                        new
                        {
                            Id = "80d00e85-4f1d-4bcd-8df7-ed9467cdb95d",
                            CursoId = "dd6fd768-fedf-49d9-b113-a49416cb1b55",
                            Nombre = "Matemáticas"
                        },
                        new
                        {
                            Id = "4be9398d-90c0-4115-8ea1-2b46c84b8fdf",
                            CursoId = "dd6fd768-fedf-49d9-b113-a49416cb1b55",
                            Nombre = "Educación Física"
                        },
                        new
                        {
                            Id = "c68a2980-e138-49c1-bbd7-1e1a820fc359",
                            CursoId = "dd6fd768-fedf-49d9-b113-a49416cb1b55",
                            Nombre = "Castellano"
                        },
                        new
                        {
                            Id = "49288972-7bae-49cb-b7de-b588146708f0",
                            CursoId = "dd6fd768-fedf-49d9-b113-a49416cb1b55",
                            Nombre = "Ciencias Naturales"
                        },
                        new
                        {
                            Id = "94e5afa4-4814-4ec3-8489-334e9cda4876",
                            CursoId = "dd6fd768-fedf-49d9-b113-a49416cb1b55",
                            Nombre = "Programación"
                        },
                        new
                        {
                            Id = "94378f5d-7959-41b9-9980-42b5996ad289",
                            CursoId = "0926b725-a4b9-4b93-9699-d28906bea276",
                            Nombre = "Matemáticas"
                        },
                        new
                        {
                            Id = "0a5e8ed9-22dd-4414-accc-f0523dc6c680",
                            CursoId = "0926b725-a4b9-4b93-9699-d28906bea276",
                            Nombre = "Educación Física"
                        },
                        new
                        {
                            Id = "dc8f1b36-4863-46f5-b6a4-5411c85c5069",
                            CursoId = "0926b725-a4b9-4b93-9699-d28906bea276",
                            Nombre = "Castellano"
                        },
                        new
                        {
                            Id = "5b709b79-b2ab-4c69-9468-bc82aa210065",
                            CursoId = "0926b725-a4b9-4b93-9699-d28906bea276",
                            Nombre = "Ciencias Naturales"
                        },
                        new
                        {
                            Id = "fdac5fb4-48bc-45c4-a24f-6a89ea7c8b76",
                            CursoId = "0926b725-a4b9-4b93-9699-d28906bea276",
                            Nombre = "Programación"
                        },
                        new
                        {
                            Id = "24db15d1-bd63-4dfd-9093-067ecf89613e",
                            CursoId = "49e3c37e-6d67-4d3b-baf4-7d3bea1291e2",
                            Nombre = "Matemáticas"
                        },
                        new
                        {
                            Id = "12b2ee01-05ba-43ad-9d45-49c15bdee722",
                            CursoId = "49e3c37e-6d67-4d3b-baf4-7d3bea1291e2",
                            Nombre = "Educación Física"
                        },
                        new
                        {
                            Id = "22a91149-dd7b-4cea-b403-3007d69f7221",
                            CursoId = "49e3c37e-6d67-4d3b-baf4-7d3bea1291e2",
                            Nombre = "Castellano"
                        },
                        new
                        {
                            Id = "9c773177-c451-4f16-9487-521d1dc123f5",
                            CursoId = "49e3c37e-6d67-4d3b-baf4-7d3bea1291e2",
                            Nombre = "Ciencias Naturales"
                        },
                        new
                        {
                            Id = "db400b75-0bd1-45f6-993d-4d8f5d578d34",
                            CursoId = "49e3c37e-6d67-4d3b-baf4-7d3bea1291e2",
                            Nombre = "Programación"
                        },
                        new
                        {
                            Id = "52e2a857-9d7c-47ee-bc08-3925adcd51ac",
                            CursoId = "967fbe03-ab75-4372-ace4-ef80f1cf5d23",
                            Nombre = "Matemáticas"
                        },
                        new
                        {
                            Id = "fe5bea6c-bf54-47a6-9b5c-8d057788f955",
                            CursoId = "967fbe03-ab75-4372-ace4-ef80f1cf5d23",
                            Nombre = "Educación Física"
                        },
                        new
                        {
                            Id = "b03a0a25-5300-43da-a799-2927fbe91ced",
                            CursoId = "967fbe03-ab75-4372-ace4-ef80f1cf5d23",
                            Nombre = "Castellano"
                        },
                        new
                        {
                            Id = "2b0e3d61-15e2-40b1-9430-330877f474c7",
                            CursoId = "967fbe03-ab75-4372-ace4-ef80f1cf5d23",
                            Nombre = "Ciencias Naturales"
                        },
                        new
                        {
                            Id = "3380b73f-25c4-4a05-8d61-a7f0688950ea",
                            CursoId = "967fbe03-ab75-4372-ace4-ef80f1cf5d23",
                            Nombre = "Programación"
                        });
                });

            modelBuilder.Entity("Escuela.Models.Curso", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Dirección")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Jornada")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("Cursos");

                    b.HasData(
                        new
                        {
                            Id = "dd6fd768-fedf-49d9-b113-a49416cb1b55",
                            Jornada = 0,
                            Nombre = "101"
                        },
                        new
                        {
                            Id = "0926b725-a4b9-4b93-9699-d28906bea276",
                            Jornada = 1,
                            Nombre = "102"
                        },
                        new
                        {
                            Id = "49e3c37e-6d67-4d3b-baf4-7d3bea1291e2",
                            Jornada = 0,
                            Nombre = "103"
                        },
                        new
                        {
                            Id = "967fbe03-ab75-4372-ace4-ef80f1cf5d23",
                            Jornada = 2,
                            Nombre = "104"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Escuela.Areas.Identity.Data.EscuelaUser", b =>
                {
                    b.HasOne("Escuela.Models.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId");
                });

            modelBuilder.Entity("Escuela.Models.Alumno", b =>
                {
                    b.HasOne("Escuela.Models.Curso", "Curso")
                        .WithMany("Alumnos")
                        .HasForeignKey("CursoId");
                });

            modelBuilder.Entity("Escuela.Models.Asignatura", b =>
                {
                    b.HasOne("Escuela.Models.Alumno", null)
                        .WithMany("Asignaturas")
                        .HasForeignKey("AlumnoId");

                    b.HasOne("Escuela.Models.Curso", "Curso")
                        .WithMany("Asignaturas")
                        .HasForeignKey("CursoId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Escuela.Areas.Identity.Data.EscuelaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Escuela.Areas.Identity.Data.EscuelaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Escuela.Areas.Identity.Data.EscuelaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Escuela.Areas.Identity.Data.EscuelaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
